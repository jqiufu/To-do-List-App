{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","buttonStyle","border","borderRadius","cursor","float","TodoItem","todo","markComplete","delTodo","borderBotton","completed","type","onChange","id","title","onClick","Todos","todos","map","key","AddTodo","addTodo","useState","setTitle","onSubmit","e","preventDefault","display","name","flex","placeholder","value","target","className","About","initialTodos","uuidv4","App","setTodos","isCompleted","newTodos","filter","newItem","exact","path","render","props","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9adcd52d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle} >\r\n            <h1>TodoList</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n};\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n};\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TodoItem({todo, markComplete, delTodo}) {\r\n    // Function for the style of a TodoItem\r\n    const getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBotton: '1px #ccc dotted',\r\n            textDecoration: todo.completed ? 'line-through' : 'none' \r\n        }\r\n    }\r\n\r\n    // Function to update state when a TodoItem is completed\r\n    const toggleComplete = () => {\r\n        markComplete(todo.id, !todo.completed);\r\n    };\r\n\r\n    // Function to delete a TodoItem\r\n    const deleteTodo = () => {\r\n        delTodo(todo.id);\r\n    };\r\n\r\n    return (\r\n        <div style={getStyle()} >\r\n            <p>\r\n                <input type=\"checkbox\" onChange={toggleComplete} /> {' '}\r\n                {todo.title}\r\n                <button onClick={deleteTodo} style={buttonStyle} >x</button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Object containing the style of the delete button\r\nconst buttonStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\n// Proptypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Todos({todos, markComplete, delTodo}) {\r\nreturn todos.map(todo => (\r\n    <TodoItem key={todo.id} todo={todo} markComplete={markComplete} delTodo={delTodo} />\r\n));\r\n  }\r\n  \r\n// Proptypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;","import React, { useState } from 'react';\r\nimport Proptypes from 'prop-types';\r\n\r\nfunction AddTodo({addTodo}) {\r\n\r\n    const [title, setTitle] = useState(' ');\r\n\r\n    // Function to manage the text input of the AddTodo component\r\n    const onChange = (e) => setTitle(e.target.value);\r\n\r\n    // Function that deals with submiting a TodoItem\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        addTodo(title);\r\n        setTitle(' ');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} style={{display: 'flex'}}>\r\n            <input \r\n                type=\"text\"\r\n                name=\"title\"\r\n                style={{flex: '10', padding: '5px'}}\r\n                placeholder=\"Add Todo ...\"\r\n                value={title}\r\n                onChange={onChange}\r\n            />\r\n            <input \r\n                className=\"btn\"\r\n                type=\"submit\"\r\n                value=\"Submit\"\r\n                style={{flex: '1'}}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n// Proptypes\r\nAddTodo.propTypes = {\r\n    addTodo: Proptypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n            <p>This is a TodoList app</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.css';\n\nconst initialTodos = [\n  {\n    id: uuidv4(),\n    title: 'Walk the dog',\n    completed: false\n  },\n  {\n    id: uuidv4(),\n    title: 'Do Math homework',\n    completed: false\n  },\n  {\n    id: uuidv4(),\n    title: 'Cook dinner',\n    completed: false\n  }\n];\n\nfunction App() {\n  const [todos, setTodos] = useState(initialTodos);\n\n  // Function to toggle the complete property on the state\n  const markComplete = (id, isCompleted) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: isCompleted };\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n\n  // Function to delete a TodoItem\n  const delTodo = (id) => {\n    const newTodos = [...todos.filter((todo) => todo.id !== id)];\n    setTodos(newTodos);\n  };\n\n  // Function to add a TodoItem\n  const addTodo = (title) => {\n    const newItem = {\n      id: uuidv4(),\n      title,\n      completed: false\n    };\n\n    setTodos([...todos, newItem]);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <Route\n          exact\n          path=\"/\"\n          render={(props) => (\n            <>\n              <AddTodo addTodo={addTodo} />\n              <Todos\n                todos={todos}\n                markComplete={markComplete}\n                delTodo={delTodo}\n              />\n            </>\n          )}\n        />\n        <Route path=\"/about\" component={About} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}